/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/admincenter_screen/AdminCenterViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

AdminCenterViewBase::AdminCenterViewBase() :
    buttonCallback(this, &AdminCenterViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &AdminCenterViewBase::sliderValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    Cover.setXY(0, 0);
    Cover.setBitmap(touchgfx::Bitmap(BITMAP_REALISTISCHE_ART_DES_LEITERPLATTE_HINTERGRUNDES_23_2148212060_ID));

    SettingsButton.setXY(215, 100);
    SettingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_ORIGINAL_ID), touchgfx::Bitmap(BITMAP_ORIGINAL_ID));
    SettingsButton.setAction(buttonCallback);

    AddUserButton.setXY(0, 0);
    AddUserButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    AddUserButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
    AddUserButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    AddUserButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    AddUserButton.setAction(buttonCallback);

    VerifyUserButton.setXY(0, 60);
    VerifyUserButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    VerifyUserButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
    VerifyUserButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    VerifyUserButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    VerifyUserButton.setAction(buttonCallback);

    DeleteUserButton.setXY(305, 212);
    DeleteUserButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    DeleteUserButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID4));
    DeleteUserButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    DeleteUserButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    DeleteUserButton.setAction(buttonCallback);

    DeleteAllUser.setXY(0, 212);
    DeleteAllUser.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    DeleteAllUser.setLabelText(touchgfx::TypedText(T_SINGLEUSEID5));
    DeleteAllUser.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    DeleteAllUser.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    DeleteAllUser.setAction(buttonCallback);

    UserCountButton.setXY(0, 120);
    UserCountButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    UserCountButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID6));
    UserCountButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    UserCountButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    UserCountButton.setAction(buttonCallback);

    slider1.setXY(301, 0);
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_SQUARE_KNOB_ID));
    slider1.setupHorizontalSlider(3, 7, 0, 0, 125);
    slider1.setValueRange(0, 5);
    slider1.setValue(0);
    slider1.setNewValueCallback(sliderValueChangedCallback);

    slider2.setXY(301, 34);
    slider2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_SQUARE_KNOB_ID));
    slider2.setupHorizontalSlider(3, 7, 0, 0, 125);
    slider2.setValueRange(0, 9);
    slider2.setValue(0);
    slider2.setNewValueCallback(sliderValueChangedCallback);

    slider3.setXY(301, 68);
    slider3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_SQUARE_KNOB_ID));
    slider3.setupHorizontalSlider(3, 7, 0, 0, 125);
    slider3.setValueRange(0, 9);
    slider3.setValue(0);
    slider3.setNewValueCallback(sliderValueChangedCallback);

    textProgress1.setXY(368, 112);
    textProgress1.setProgressIndicatorPosition(0, 0, 84, 34);
    textProgress1.setRange(0, 100);
    textProgress1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textProgress1.setNumberOfDecimals(0);
    textProgress1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
    textProgress1.setValue(0);

    textProgress2.setXY(383, 112);
    textProgress2.setProgressIndicatorPosition(0, 0, 84, 34);
    textProgress2.setRange(0, 100);
    textProgress2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textProgress2.setNumberOfDecimals(0);
    textProgress2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
    textProgress2.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
    textProgress2.setValue(0);

    textProgress3.setXY(398, 112);
    textProgress3.setProgressIndicatorPosition(0, 0, 84, 34);
    textProgress3.setRange(0, 100);
    textProgress3.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textProgress3.setNumberOfDecimals(0);
    textProgress3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
    textProgress3.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
    textProgress3.setValue(0);

    fail.setXY(221, 110);
    fail.setVisible(false);
    fail.setBitmap(touchgfx::Bitmap(BITMAP_IMAGES_ID));

    check.setXY(219, 104);
    check.setVisible(false);
    check.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_ID));

    textArea1.setPosition(215, 192, 260, 26);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 255, 177));
    textArea1.setLinespacing(0);
    textArea1Buffer[0] = 0;
    textArea1.setWildcard(textArea1Buffer);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));

    add(__background);
    add(Cover);
    add(SettingsButton);
    add(AddUserButton);
    add(VerifyUserButton);
    add(DeleteUserButton);
    add(DeleteAllUser);
    add(UserCountButton);
    add(slider1);
    add(slider2);
    add(slider3);
    add(textProgress1);
    add(textProgress2);
    add(textProgress3);
    add(fail);
    add(check);
    add(textArea1);
}

void AdminCenterViewBase::setupScreen()
{

    //deactivateAutoVerify
    //When screen transition begins call virtual function
    //Call deactivateAutoVerify
    deactivateAutoVerify();

}

void AdminCenterViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &SettingsButton)
    {
        //ChangeScreen
        //When SettingsButton clicked change screen to StandartScreen
        //Go to StandartScreen with no screen transition
        application().gotoStandartScreenScreenNoTransition();

        //activateAutoVerify
        //When SettingsButton clicked call virtual function
        //Call activateAutoVerify
        activateAutoVerify();
    }
    else if (&src == &AddUserButton)
    {
        //AddUser
        //When AddUserButton clicked call virtual function
        //Call addUserButtonClicked
        addUserButtonClicked();
    }
    else if (&src == &VerifyUserButton)
    {
        //VerifyUserButton
        //When VerifyUserButton clicked call virtual function
        //Call verifyUserButtonClicked
        verifyUserButtonClicked();
    }
    else if (&src == &DeleteUserButton)
    {
        //DeleteUserButton
        //When DeleteUserButton clicked call virtual function
        //Call deleteUserButtonClicked
        deleteUserButtonClicked();
    }
    else if (&src == &DeleteAllUser)
    {
        //deleteAllUser
        //When DeleteAllUser clicked call virtual function
        //Call deleteAllUserButtonClicked
        deleteAllUserButtonClicked();
    }
    else if (&src == &UserCountButton)
    {
        //UserCountButton
        //When UserCountButton clicked call virtual function
        //Call uscerCountButtonClicked
        uscerCountButtonClicked();
    }
}

void AdminCenterViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider1)
    {
        //Interaction1
        //When slider1 value changed execute C++ code
        //Execute C++ code
        textProgress1.setValue(value);
        if(slider1.getValue() == 5)
        {
        slider2.setValue(0);
        slider3.setValue(0);
        slider2.setTouchable(false);
        slider3.setTouchable(false);
        }
        else
        {
        slider2.setTouchable(true);
        slider3.setTouchable(true);
        }
    }
    else if (&src == &slider2)
    {
        //Interaction2
        //When slider2 value changed execute C++ code
        //Execute C++ code
        textProgress2.setValue(value);
    }
    else if (&src == &slider3)
    {
        //Interaction3
        //When slider3 value changed execute C++ code
        //Execute C++ code
        textProgress3.setValue(value);
    }
}
